#!/usr/bin/env python3

import sys
import threading
import time
import os
from datetime import datetime
from generated import messenger_pb2
from generated import messenger_pb2_grpc
import grpc


class StreamingConsoleChat:
    def __init__(self, server_address='localhost:8080'):
        self.server_address = server_address
        self.channel = None
        self.stub = None
        self.nickname = None
        self.room_messages = {}
        self.running = False
        self.current_chat_id = None
        self.user_chats = {}
        self.chat_names = {}
        self.notifications = []
        self.user_colors = {}
        self.available_colors = [31, 32, 33, 34, 35, 36, 91, 92, 93, 94, 95, 96]
        self.stream_thread = None
        self.stream_stub = None
        
    def connect(self):
        try:
            self.channel = grpc.insecure_channel(self.server_address)
            self.stub = messenger_pb2_grpc.MessengerStub(self.channel)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É {self.server_address}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        if self.channel:
            self.channel.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    
    def get_user_color(self, nickname):
        if nickname not in self.user_colors:
            import hashlib
            hash_value = int(hashlib.md5(nickname.encode()).hexdigest(), 16)
            color_index = hash_value % len(self.available_colors)
            self.user_colors[nickname] = self.available_colors[color_index]
        return self.user_colors[nickname]
    
    def send_message(self, message, chat_id=None):
        if chat_id is None:
            chat_id = self.current_chat_id
            
        if not chat_id:
            self.add_notification_to_list("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
            
        try:
            chat_message = messenger_pb2.ChatMessage(
                content=message,
                nickname=self.nickname,
                chat_id=chat_id,
                type=messenger_pb2.MESSAGE
            )
            
            if hasattr(self, 'message_queue'):
                self.message_queue.append(chat_message)
                
            self.add_room_message(chat_id, message, self.nickname, is_sent=True)
            
        except Exception as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def add_room_message(self, chat_id, content, nickname, is_sent=False):
        if chat_id not in self.room_messages:
            self.room_messages[chat_id] = []
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.room_messages[chat_id].append({
            'content': content,
            'nickname': nickname,
            'timestamp': timestamp,
            'is_sent': is_sent
        })
        print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {content} –æ—Ç {nickname}")
    
    def add_notification_to_list(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.notifications.append(f"üîî [{timestamp}] {message}")
        if len(self.notifications) > 20:
            self.notifications = self.notifications[-20:]
    
    def get_user_chats(self):
        try:
            request = messenger_pb2.GetUserChatsRequest(nickname=self.nickname)
            response = self.stub.GetUserChats(request)
            
            self.user_chats = {chat.chat_id: chat for chat in response.chats}
            
            for chat_id in self.user_chats.keys():
                if chat_id not in self.chat_names:
                    self.chat_names[chat_id] = f"Chat {chat_id}"
            
            return response.chats
        except grpc.RpcError as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            return []
    
    def create_chat(self, name):
        try:
            request = messenger_pb2.CreateChatRequest(name=name, nickname=self.nickname)
            response = self.stub.CreateChat(request)
            
            chat_id = response.chat_id
            self.chat_names[chat_id] = name
            
            if hasattr(self, 'message_queue'):
                chat_message = messenger_pb2.ChatMessage(
                    content=f"–°–æ–∑–¥–∞–Ω —á–∞—Ç: {name}",
                    nickname=self.nickname,
                    chat_id=chat_id,
                    type=messenger_pb2.CHAT_CREATED
                )
                self.message_queue.append(chat_message)
            
            self.add_notification_to_list(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–∞—Ç: {name} (ID: {chat_id})")
            return chat_id
            
        except grpc.RpcError as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            return None
    
    def join_chat(self, chat_id):
        try:
            request = messenger_pb2.JoinChatRequest(chat_id=chat_id, nickname=self.nickname)
            response = self.stub.JoinChat(request)
            
            if response.success:
                if hasattr(self, 'message_queue'):
                    self.add_notification_to_list(f"Sending user joined message to stream: {self.nickname} {chat_id}")
                    chat_message = messenger_pb2.ChatMessage(
                        content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É",
                        nickname=self.nickname,
                        chat_id=chat_id,
                        type=messenger_pb2.USER_JOINED
                    )
                    self.message_queue.append(chat_message)
                else:
                    self.add_notification_to_list(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É")
                
                self.add_notification_to_list(f"‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É {self.chat_names.get(chat_id, chat_id)}")
                self.get_user_chats()
                return True
            else:
                self.add_notification_to_list(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
                return False
                
        except grpc.RpcError as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É: {e}")
            return False
    
    def leave_chat(self, chat_id):
        try:
            request = messenger_pb2.LeaveChatRequest(chat_id=chat_id, nickname=self.nickname)
            response = self.stub.LeaveChat(request)
            
            if response.success:
                if hasattr(self, 'message_queue'):
                    chat_message = messenger_pb2.ChatMessage(
                        content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç",
                        nickname=self.nickname,
                        chat_id=chat_id,
                        type=messenger_pb2.USER_LEFT
                    )
                    self.message_queue.append(chat_message)
                
                self.add_notification_to_list(f"‚úÖ –ü–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç {self.chat_names.get(chat_id, chat_id)}")
                return True
            else:
                self.add_notification_to_list(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç")
                return False
                
        except grpc.RpcError as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞: {e}")
            return False
    
    def switch_chat(self, chat_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —á–∞—Ç"""
        if chat_id not in self.user_chats:
            self.add_notification_to_list("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
            return False
        
        if hasattr(self, 'message_queue'):
            chat_message = messenger_pb2.ChatMessage(
                content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.nickname} –≤–æ—à–µ–ª –≤ —á–∞—Ç",
                nickname=self.nickname,
                chat_id=chat_id,
                type=messenger_pb2.USER_GOT_IN
            )
            self.message_queue.append(chat_message)
        
        self.current_chat_id = chat_id
        chat_name = self.chat_names.get(chat_id, chat_id)
        self.add_notification_to_list(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —á–∞—Ç: {chat_name} ({chat_id})")
        
        self.get_chat_messages(chat_id)
        return True
    
    def get_chat_messages(self, chat_id):
        try:
            request = messenger_pb2.GetMessagesRequest(chat_id=chat_id)
            response = self.stub.GetMessages(request)
            
            self.room_messages[chat_id] = []
            
            for msg in response.messages:
                self.add_room_message(chat_id, msg.content, msg.nickname)
                self.get_user_color(msg.nickname)
                
        except grpc.RpcError as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def start_streaming(self):
        try:
            self.message_queue = []
            self.heartbeat_running = True
            
            connect_message = messenger_pb2.ChatMessage(
                content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.nickname} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è",
                nickname=self.nickname,
                chat_id="",
                type=messenger_pb2.USER_CONNECTED
            )
            self.message_queue.append(connect_message)
            
            def message_iterator():
                last_heartbeat = time.time()
                while self.heartbeat_running:
                    if self.message_queue:
                        yield self.message_queue.pop(0)
                    else:
                        current_time = time.time()
                        if current_time - last_heartbeat > 30:
                            heartbeat_message = messenger_pb2.ChatMessage(
                                content="heartbeat",
                                nickname=self.nickname,
                                chat_id="",
                                type=messenger_pb2.USER_CONNECTED
                            )
                            yield heartbeat_message
                            last_heartbeat = current_time
                        else:
                            time.sleep(0.1)
            
            self.stream_stub = self.stub.ChatStream(message_iterator())
            
            self.stream_thread = threading.Thread(target=self.stream_receiver, daemon=True)
            self.stream_thread.start()
            
            self.add_notification_to_list("üîÑ –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
            return False
    
    def stream_receiver(self):
        try:
            for message in self.stream_stub:
                if message.type == messenger_pb2.MESSAGE:
                    print(f"\n[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content} –æ—Ç {message.nickname} –≤ —á–∞—Ç {message.chat_id}")
                    self.add_room_message(message.chat_id, message.content, message.nickname)
                    self.refresh_display()
                elif message.type == messenger_pb2.USER_JOINED:
                    self.add_notification_to_list(f"üëã {message.nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É {message.chat_id}")
                    self.refresh_display()
                elif message.type == messenger_pb2.USER_LEFT:
                    self.add_notification_to_list(f"üëã {message.nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {message.chat_id}")
                    self.refresh_display()
                elif message.type == messenger_pb2.CHAT_CREATED:
                    self.add_notification_to_list(f"üÜï {message.content}")
                    self.refresh_display()
                elif message.type == messenger_pb2.USER_GOT_IN:
                    self.add_notification_to_list(f"üö™ {message.nickname} –≤–æ—à–µ–ª –≤ —á–∞—Ç {message.chat_id}")
                    self.refresh_display()
                
                self.get_user_color(message.nickname)
                
        except Exception as e:
            self.add_notification_to_list(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
    
    def stop_streaming(self):
        self.heartbeat_running = False
        
        if hasattr(self, 'message_queue') and self.message_queue is not None:
            for chat_id in self.user_chats.keys():
                leave_message = messenger_pb2.ChatMessage(
                    content=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.nickname} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç",
                    nickname=self.nickname,
                    chat_id=chat_id,
                    type=messenger_pb2.USER_LEFT
                )
                self.message_queue.append(leave_message)
            
            time.sleep(0.5)
        
        if self.stream_stub:
            try:
                self.stream_stub.cancel()
            except:
                pass
            self.stream_stub = None
        
        if self.stream_thread:
            self.stream_thread.join(timeout=1)
            self.stream_thread = None
    
    def display_messages(self):
        self.clear_screen()
        
        print("=" * 80)
        print(f"üéØ –°–¢–†–ò–ú–ò–ù–ì–û–í–´–ô –ß–ê–¢ - {self.nickname}")
        print("=" * 80)
        
        if self.notifications:
            print("üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
            for notification in self.notifications[-5:]:
                print(f"  {notification}")
            print()
        
        if self.current_chat_id is None:
            print("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print("=" * 40)
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            print("  /create <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç")
            print("  /join <chat_id> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
            print("  /chats - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤")
            print("  /help - –ø–æ–º–æ—â—å")
            print("  /exit - –≤—ã—Ö–æ–¥")
            print()
        else:
            chat_name = self.chat_names.get(self.current_chat_id, self.current_chat_id)
            print(f"üí¨ –ß–ê–¢: {chat_name} ({self.current_chat_id})")
            print("=" * 40)
            
            if self.current_chat_id in self.room_messages:
                for msg in self.room_messages[self.current_chat_id][-20:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    color = self.get_user_color(msg['nickname'])
                    if msg['is_sent']:
                        print(f"  \033[{color}m[{msg['timestamp']}] {msg['nickname']}: {msg['content']}\033[0m")
                    else:
                        print(f"  \033[{color}m[{msg['timestamp']}] {msg['nickname']}: {msg['content']}\033[0m")
            print()
        
        print("-" * 80)
        if self.current_chat_id:
            print(f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É (—á–∞—Ç: {self.chat_names.get(self.current_chat_id, self.current_chat_id)}): ", end="", flush=True)
        else:
            print("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ", end="", flush=True)
    
    def clear_screen(self):
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def refresh_display(self):
        if self.current_chat_id:
            print(f"[DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {self.current_chat_id}")
            self.display_messages()
    
    def show_help(self):
        print("\nüìñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:")
        print("=" * 50)
        print("üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print("  /create <–Ω–∞–∑–≤–∞–Ω–∏–µ>  - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç")
        print("  /join <chat_id>     - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
        print("  /chats             - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤")
        print("  /home              - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("  /notifications     - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("  /colors            - –ø–æ–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  /help              - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("  /exit              - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        print()
        print("üí¨ –í –ß–ê–¢–ï:")
        print("  /leave             - –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç")
        print("  /history           - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("  /current           - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ")
        print()
        print("üîÑ –°–¢–†–ò–ú–ò–ù–ì:")
        print("  –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–∏–º")
        print("  –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("=" * 50)
    
    def show_status(self):
        print("\nüìä –°–¢–ê–¢–£–°:")
        print("=" * 30)
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.nickname}")
        print(f"üåê –°–µ—Ä–≤–µ—Ä: {self.server_address}")
        print(f"üí¨ –¢–µ–∫—É—â–∏–π —á–∞—Ç: {self.current_chat_id or '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}")
        print(f"üìù –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(self.user_chats)}")
        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(self.notifications)}")
        print(f"üé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ü–≤–µ—Ç–∞–º–∏: {len(self.user_colors)}")
        print(f"üîÑ –°—Ç—Ä–∏–º–∏–Ω–≥: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.stream_stub else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        print("=" * 30)
    
    def process_command(self, user_input):
        parts = user_input.strip().split()
        if not parts:
            return
        
        command = parts[0].lower()
        
        if command == "/help":
            self.show_help()
            return
        elif command == "/exit":
            self.running = False
            return
        elif command == "/status":
            self.show_status()
            return
        elif command == "/home":
            self.current_chat_id = None
            self.add_notification_to_list("üè† –ü–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            return
        elif command == "/chats":
            chats = self.get_user_chats()
            if chats:
                print("\nüìã –í–ê–®–ò –ß–ê–¢–´:")
                print("=" * 40)
                for chat in chats:
                    chat_name = self.chat_names.get(chat.chat_id, chat.chat_id)
                    new_messages = chat.new_messages
                    status = f" ({new_messages} –Ω–æ–≤—ã—Ö)" if new_messages > 0 else ""
                    print(f"  ‚Ä¢ {chat_name} (ID: {chat.chat_id}){status}")
                print("=" * 40)
            else:
                print("\nüìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤")
            return
        elif command == "/create":
            if len(parts) < 2:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: /create <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
                return
            chat_name = " ".join(parts[1:])
            chat_id = self.create_chat(chat_name)
            if chat_id:
                self.get_user_chats()
        elif command == "/join":
            if len(parts) < 2:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞: /join <chat_id>")
                return
            chat_id = parts[1]
            if self.join_chat(chat_id):
                self.switch_chat(chat_id)
        elif command == "/leave":
            if not self.current_chat_id:
                print("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ")
                return
            if self.leave_chat(self.current_chat_id):
                self.current_chat_id = None
                self.add_notification_to_list("üè† –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        elif command == "/history":
            if not self.current_chat_id:
                print("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ")
                return
            self.get_chat_messages(self.current_chat_id)
            print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ {self.chat_names.get(self.current_chat_id, self.current_chat_id)} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return
        elif command == "/current":
            if not self.current_chat_id:
                print("‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ")
                return
            chat_name = self.chat_names.get(self.current_chat_id, self.current_chat_id)
            chat_stats = self.user_chats.get(self.current_chat_id)
            new_messages = chat_stats.new_messages if chat_stats else 0
            print(f"\nüí¨ –¢–ï–ö–£–©–ò–ô –ß–ê–¢:")
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_name}")
            print(f"  ID: {self.current_chat_id}")
            print(f"  –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {new_messages}")
            print(f"  –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.room_messages.get(self.current_chat_id, []))}")
            return
        elif command == "/notifications":
            self.notifications = []
            print("\n‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
            return
        elif command == "/colors":
            if self.user_colors:
                print("\nüé® –¶–í–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
                print("=" * 40)
                for nickname, color in self.user_colors.items():
                    print(f"  \033[{color}m{nickname}\033[0m")
                print("=" * 40)
            else:
                print("\nüé® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        else:
            if self.current_chat_id:
                self.send_message(user_input)
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def run(self):
        print("üéØ –°–¢–†–ò–ú–ò–ù–ì–û–í–´–ô –ß–ê–¢")
        print("=" * 50)
        
        self.nickname = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
        if not self.nickname:
            print("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        if not self.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        self.get_user_color(self.nickname)
                
        if not self.start_streaming():
            return
        
        self.get_user_chats()
        
        self.add_notification_to_list(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.nickname}!")
        self.add_notification_to_list("üîÑ –°—Ç—Ä–∏–º–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        self.running = True
        
        try:
            while self.running:
                no_update_commands = ["/help", "/status", "/rooms", "/history", "/current", "/notifications", "/home", "/colors"]
                
                self.display_messages()
                user_input = input()
                
                if not user_input.strip():
                    continue
                
                self.process_command(user_input)
                
                if self.running and not any(user_input.strip().startswith(cmd) for cmd in no_update_commands):
                    self.display_messages()
                    
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
        finally:
            self.stop_streaming()
            self.disconnect()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —á–∞—Ç')
    parser.add_argument('--server', default='localhost:8080', help='–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost:8080)')
    
    args = parser.parse_args()
    
    chat = StreamingConsoleChat(args.server)
    chat.run()
