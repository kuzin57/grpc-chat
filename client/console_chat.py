#!/usr/bin/env python3

import curses
import sys
import threading
import time
from datetime import datetime
from generated import messenger_pb2
from generated import messenger_pb2_grpc
import grpc


class ConsoleChat:
    def __init__(self, server_address='localhost:8080'):
        self.server_address = server_address
        self.channel = None
        self.stub = None
        self.nickname = None
        self.messages = []
        self.input_buffer = ""
        self.running = False
        self.last_message_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞
        self.messages_height = 0
        self.input_height = 3
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.channel = grpc.insecure_channel(self.server_address)
            self.stub = messenger_pb2_grpc.MessengerStub(self.channel)
            return True
        except Exception as e:
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.channel:
            self.channel.close()
    
    def send_message(self, message, to_nickname):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            request = messenger_pb2.SendMessageRequest(
                message=message,
                from_nickname=self.nickname,
                to_nickname=to_nickname
            )
            
            response = self.stub.SendMessage(request)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            self.add_message(f"[{self.nickname}] -> [{to_nickname}]: {message}", "sent")
            return response.message_id
        except grpc.RpcError as e:
            self.add_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", "error")
            return None
    
    def get_received_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            request = messenger_pb2.GetReceivedMessagesRequest(nickname=self.nickname)
            response = self.stub.GetReceivedMessages(request)
            
            for msg in response.messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg_time = datetime.fromisoformat(msg.created_at.replace('Z', '+00:00'))
                if msg_time.timestamp() > self.last_message_time:
                    self.add_message(f"[{msg.from_nickname}]: {msg.content}", "received")
            
            self.last_message_time = time.time()
            return response.messages
        except grpc.RpcError as e:
            self.add_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", "error")
            return []
    
    def add_message(self, message, msg_type="info"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        self.messages.append((formatted_message, msg_type))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(self.messages) > 1000:
            self.messages = self.messages[-500:]
    
    def init_screen(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ curses"""
        self.stdscr = curses.initscr()
        curses.noecho()
        curses.cbreak()
        self.stdscr.keypad(True)
        curses.curs_set(1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        self.height, self.width = self.stdscr.getmaxyx()
        self.messages_height = self.height - self.input_height
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–∞
        self.messages_win = curses.newwin(self.messages_height, self.width, 0, 0)
        self.input_win = curses.newwin(self.input_height, self.width, self.messages_height, 0)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_win.scrollok(True)
        self.messages_win.idlok(True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞
        self.input_win.scrollok(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.draw_headers()
    
    def draw_headers(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–∫–æ–Ω"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_win.addstr(0, 0, "=" * self.width, curses.A_REVERSE)
        self.messages_win.addstr(0, 2, "üì® –°–û–û–ë–©–ï–ù–ò–Ø", curses.A_REVERSE | curses.A_BOLD)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–ª–∞—Å—Ç–∏ –≤–≤–æ–¥–∞
        self.input_win.addstr(0, 0, "=" * self.width, curses.A_REVERSE)
        self.input_win.addstr(0, 2, "‚úèÔ∏è  –í–í–û–î", curses.A_REVERSE | curses.A_BOLD)
        self.input_win.addstr(1, 0, f"{self.nickname} >> ", curses.A_BOLD)
    
    def draw_messages(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.messages_win.clear()
        self.draw_headers()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        start_line = max(0, len(self.messages) - (self.messages_height - 2))
        
        for i, (message, msg_type) in enumerate(self.messages[start_line:]):
            line = i + 1
            if line >= self.messages_height - 1:
                break
                
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            color = curses.A_NORMAL
            if msg_type == "received":
                color = curses.color_pair(2) | curses.A_BOLD  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
            elif msg_type == "sent":
                color = curses.color_pair(3) | curses.A_BOLD  # –°–∏–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            elif msg_type == "error":
                color = curses.color_pair(1) | curses.A_BOLD  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            display_message = message[:self.width-1]
            self.messages_win.addstr(line, 1, display_message, color)
        
        self.messages_win.refresh()
    
    def draw_input(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        self.input_win.clear()
        self.draw_headers()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞
        prompt = f"{self.nickname} >> "
        self.input_win.addstr(1, 0, prompt, curses.A_BOLD)
        self.input_win.addstr(1, len(prompt), self.input_buffer)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.input_win.addstr(2, 0, "–ö–æ–º–∞–Ω–¥—ã: /help - —Å–ø—Ä–∞–≤–∫–∞, /exit - –≤—ã—Ö–æ–¥, /to <–Ω–∏–∫> - –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        
        self.input_win.refresh()
    
    def handle_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if key == curses.KEY_BACKSPACE or key == 127:
            if self.input_buffer:
                self.input_buffer = self.input_buffer[:-1]
        elif key == 10 or key == 13:  # Enter
            self.process_command(self.input_buffer.strip())
            self.input_buffer = ""
        elif 32 <= key <= 126:  # –ü–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            self.input_buffer += chr(key)
        
        self.draw_input()
    
    def process_command(self, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        if not command:
            return
        
        if command == "/exit":
            self.running = False
        elif command == "/help":
            help_messages = [
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                "/exit - –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞",
                "/to <–Ω–∏–∫–Ω–µ–π–º> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                "/refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º"
            ]
            for msg in help_messages:
                self.add_message(msg, "info")
        elif command.startswith("/to "):
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            parts = command.split(" ", 2)
            if len(parts) >= 3:
                to_nickname = parts[1]
                message = parts[2]
                self.send_message(message, to_nickname)
            else:
                self.add_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /to <–Ω–∏–∫–Ω–µ–π–º> <—Å–æ–æ–±—â–µ–Ω–∏–µ>", "error")
        elif command == "/refresh":
            self.get_received_messages()
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)
            self.add_message(f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /to <–Ω–∏–∫–Ω–µ–π–º> <—Å–æ–æ–±—â–µ–Ω–∏–µ>", "info")
    
    def message_polling_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.running:
            try:
                self.get_received_messages()
                time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            except Exception as e:
                self.add_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–ø—Ä–æ—Å–∞: {e}", "error")
                time.sleep(5)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω
        self.init_screen()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        curses.start_color()
        curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)      # –û—à–∏–±–∫–∏
        curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)    # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)     # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        polling_thread = threading.Thread(target=self.message_polling_thread, daemon=True)
        polling_thread.start()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_message(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —á–∞—Ç, {self.nickname}!", "info")
        self.add_message("–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏", "info")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while self.running:
            try:
                self.draw_messages()
                self.draw_input()
                
                key = self.stdscr.getch()
                self.handle_input(key)
                
            except KeyboardInterrupt:
                self.running = False
            except Exception as e:
                self.add_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", "error")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.disconnect()
        curses.endwin()


def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python console_chat.py <server_address>")
        print("–ü—Ä–∏–º–µ—Ä: python console_chat.py localhost:8080")
        sys.exit(1)
    
    server_address = sys.argv[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    nickname = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
    if not nickname:
        print("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç
    chat = ConsoleChat(server_address)
    chat.nickname = nickname
    
    if not chat.connect():
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_address}")
        sys.exit(1)
    
    try:
        chat.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        curses.endwin()
    finally:
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()
